from loguru import logger
from aiogram import types, Dispatcher

from handlers.fsm.decorators import check_user_is_admin, check_user_is_registered
from services.admin import try_register_first_admin

_admin_commands = """
<b>üë®‚Äçüíª –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

/cmds - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/add_faculty - –¥–æ–¥–∞—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
/edit_faculty - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
/add_department - –¥–æ–¥–∞—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—É
/edit_department - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—É
/add_group - –¥–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É
/edit_group - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥—Ä—É–ø—É
"""


@check_user_is_registered
@check_user_is_admin
async def get_admin_commands(msg: types.Message):
    await msg.answer(_admin_commands)


async def register_first_admin(msg: types.Message):
    if await try_register_first_admin(user_id=msg.from_user.id):
        await msg.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')


def register_handlers_admin(dp: Dispatcher):
    logger.debug('Start registration handlers for admin')
    dp.register_message_handler(get_admin_commands, commands=['cmds'])
    dp.register_message_handler(register_first_admin, commands=['get_admin'])
    logger.debug('Stop registration handlers for admin')
